openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/links/:
    get:
      operationId: api_links_list
      description: ''
      tags:
      - api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
          description: ''
    post:
      operationId: api_links_create
      description: ''
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Link'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Link'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: ''
  /api/links/{id}/:
    get:
      operationId: api_links_retrieve
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this link.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: ''
    put:
      operationId: api_links_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this link.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Link'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Link'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: ''
    patch:
      operationId: api_links_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this link.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLink'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLink'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLink'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: ''
    delete:
      operationId: api_links_destroy
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this link.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/pages/:
    get:
      operationId: list_pages
      description: List pages
      summary: List pages
      tags:
      - api
      - page
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Page'
          description: ''
    post:
      operationId: create_page
      description: Create page
      summary: Create page
      tags:
      - api
      - page
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Page'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Page'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: ''
        '401':
          description: No response body
  /api/pages/{id}/:
    get:
      operationId: retrieve_page
      description: Retrieve page
      summary: Retrieve page
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: ''
        '401':
          description: No response body
    put:
      operationId: update_page
      description: Update page
      summary: Update page
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Page'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Page'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: ''
        '401':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    patch:
      operationId: patch_page
      description: Partial update page
      summary: Partial update page
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPage'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: ''
        '401':
          description: No response body
    delete:
      operationId: delete_page
      description: Delete page
      summary: Delete page
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/pages/{page}/sections/:
    get:
      operationId: list_page_sections
      description: List sections
      summary: List sections
      parameters:
      - in: path
        name: page
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      - section
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
          description: ''
    post:
      operationId: create_page_section
      description: Create section
      summary: Create section
      parameters:
      - in: path
        name: page
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      - section
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
        '401':
          description: No response body
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/sections/{id}/:
    get:
      operationId: retrieve_page_section
      description: Retrieve section
      summary: Retrieve section
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      - section
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
        '401':
          description: No response body
    put:
      operationId: update_page_section
      description: Update section
      summary: Update section
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      - section
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
        '401':
          description: No response body
    patch:
      operationId: api_sections_partial_update
      description: ''
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSection'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    delete:
      operationId: delete_page_section
      description: Delete section
      summary: Delete section
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      - page
      - section
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /rest-auth/login/:
    post:
      operationId: rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomLogin'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomLogin'
          description: ''
  /rest-auth/logout/:
    get:
      operationId: rest_auth_logout_retrieve
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - rest-auth
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - rest-auth
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /rest-auth/password/change/:
    post:
      operationId: rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /rest-auth/password/reset/:
    post:
      operationId: rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /rest-auth/password/reset/confirm/:
    post:
      operationId: rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /rest-auth/registration/:
    post:
      operationId: rest_auth_registration_create
      description: ''
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRegister'
          description: ''
  /rest-auth/registration/verify-email/:
    post:
      operationId: rest_auth_registration_verify_email_create
      description: ''
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
          description: ''
  /rest-auth/user/:
    get:
      operationId: rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - rest-auth
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    AlignEnum:
      enum:
      - left
      - center
      - right
      type: string
    CustomLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - email
      - password
    CustomRegister:
      type: object
      properties:
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password1
      - password2
    Link:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        source_content_type:
          type: integer
          description: Model name of source object
        source_object_id:
          type: string
          description: Source object id
          maxLength: 255
        source_meta:
          type: object
          additionalProperties: {}
          description: Source object extra data e.g. ranges
        target_content_type:
          type: integer
          description: Model name of target object
        target_object_id:
          type: string
          description: Target object id
          maxLength: 255
        target_meta:
          type: object
          additionalProperties: {}
          description: Target object extra data e.g. ranges
      required:
      - id
      - source_content_type
      - source_object_id
      - target_content_type
      - target_object_id
    Page:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          description: Page name
          maxLength: 255
        description:
          type: string
          nullable: true
          description: Page description
          maxLength: 255
        owner:
          type: integer
          description: Page owner
        administrators:
          type: array
          items:
            type: integer
          description: Page administrators
        editors:
          type: array
          items:
            type: integer
          description: Page editors
        viewers:
          type: array
          items:
            type: integer
          description: Page viewers
      required:
      - id
      - name
      - owner
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedLink:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        source_content_type:
          type: integer
          description: Model name of source object
        source_object_id:
          type: string
          description: Source object id
          maxLength: 255
        source_meta:
          type: object
          additionalProperties: {}
          description: Source object extra data e.g. ranges
        target_content_type:
          type: integer
          description: Model name of target object
        target_object_id:
          type: string
          description: Target object id
          maxLength: 255
        target_meta:
          type: object
          additionalProperties: {}
          description: Target object extra data e.g. ranges
    PatchedPage:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          description: Page name
          maxLength: 255
        description:
          type: string
          nullable: true
          description: Page description
          maxLength: 255
        owner:
          type: integer
          description: Page owner
        administrators:
          type: array
          items:
            type: integer
          description: Page administrators
        editors:
          type: array
          items:
            type: integer
          description: Page editors
        viewers:
          type: array
          items:
            type: integer
          description: Page viewers
    PatchedSection:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        page:
          type: string
          description: The page that the section belongs to
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          nullable: true
          description: Section type
        align:
          allOf:
          - $ref: '#/components/schemas/AlignEnum'
          nullable: true
          description: Section alignment
        data:
          type: object
          additionalProperties: {}
          nullable: true
          description: Section data
        text:
          type: string
          nullable: true
          description: Section text
        entity_ranges:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
          description: Section entity ranges. Contains entity key for `entity_map`
            and its range
        entity_map:
          type: object
          additionalProperties: {}
          nullable: true
          description: Contains data of each entity
        styles:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
          description: Styles and its ranges
        depth:
          type: integer
          maximum: 2147483647
          description: Section offset
          minimum: 0
        order:
          type: integer
          maximum: 2147483647
          description: Position number on the page
          minimum: 0
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          maxLength: 255
        pages:
          type: array
          items:
            type: integer
          readOnly: true
        accepted_terms_and_policy:
          type: boolean
    Section:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        page:
          type: string
          description: The page that the section belongs to
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          nullable: true
          description: Section type
        align:
          allOf:
          - $ref: '#/components/schemas/AlignEnum'
          nullable: true
          description: Section alignment
        data:
          type: object
          additionalProperties: {}
          nullable: true
          description: Section data
        text:
          type: string
          nullable: true
          description: Section text
        entity_ranges:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
          description: Section entity ranges. Contains entity key for `entity_map`
            and its range
        entity_map:
          type: object
          additionalProperties: {}
          nullable: true
          description: Contains data of each entity
        styles:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
          description: Styles and its ranges
        depth:
          type: integer
          maximum: 2147483647
          description: Section offset
          minimum: 0
        order:
          type: integer
          maximum: 2147483647
          description: Position number on the page
          minimum: 0
      required:
      - id
      - page
    TypeEnum:
      enum:
      - header-one
      - header-two
      - header-three
      - plain-text
      - code-block
      - numbered-list-item
      - bulleted-list-item
      - todo-list-item
      type: string
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          maxLength: 255
        pages:
          type: array
          items:
            type: integer
          readOnly: true
        accepted_terms_and_policy:
          type: boolean
      required:
      - email
      - id
      - pages
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: Session
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
